<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="$og-prefix$index.html" />
  <meta property="og:description" content="$og-description$" />
  <meta property="og:site_name" content="Maria's photo dumps" />
  <meta property="og:image" content="$og-prefix$$og-image$" />
  <meta property="og:image:url" content="$og-prefix$$og-image$" />
  <meta property="og:image:alt" content="$og-image-alt$" />

  <meta name="twitter:card" content="summary_large_image">
  <meta property="twitter:url" content="$og-prefix$index.html">
  <meta name="twitter:title" content="$if(og-pagetitle)$$og-pagetitle$$else$$pagetitle$$endif$">
  <meta name="twitter:description" content="$og-description$">
  <meta name="twitter:image" content="$og-prefix$$og-image$">

  <title>E | {{ meta.title }}</title>
  <style>
html {
  line-height: 1.2;
  font-family: serif;
  font-size: 0.9em;
  color: black;
  background-color: white;
}
body {
  margin: 0 auto;
/*  margin-right: auto; */
  max-width: 76em;
  padding: 1em;
  padding-top: 0;
  hyphens: auto;
  overflow-wrap: break-word;
  text-rendering: optimizeLegibility;
  font-kerning: normal;
}
p {
  margin: 0.7em 0;
}
a {
  color: black;
}
a:visited {
  color: black;
}

#log {
  font-family: monospace;
  border: 1px solid black;
  position: absolute;
  left: 2em;
  top: 1em;
  padding: 0.6em;
}

.editable-text:hover::after {
  content: " ✏️";
}

#showfoto-left-cont, #showfoto-right-cont {
  position: absolute;
  top: 0;
  /*  height: 100%;*/
  width: 0;
  z-index: 1;
  height: 100%;
}

#showfoto-left-cont {
  left: 0;
}

#showfoto-right-cont {
  right: 0;
}

#showfoto-left:hover, #showfoto-right:hover {
  background: rgba(0, 0, 0, 0.05);
  color: rgba(0, 0, 0, 0.8);
}

#showfoto-left, #showfoto-right {
  position: absolute;
  top: 0;
  font-size: 800%;
  font-weight: bold;
  border: none;
  width: 0.7em;
  height: 100%;
  padding: 0;
  background: rgba(0, 0, 0, 0);
  color: rgba(0, 0, 0, 0);
}

#showfoto-left {
  left: 0;
}

#showfoto-right {
  right: 0;
}

#showfoto-block-img {
  position: relative;
  top: 50%;
  left: 50%;
  transform: translate(-50%, 0);
  width: fit-content;
  height: fit-content;
}

#showfoto-img {
  display: block;
  max-width: 100%;
  max-height: calc(100vh - 8em);
  border: 2px solid black;
}

#showfoto-title {
  display: block;
  position: absolute;
  bottom: 1.4em;
  left: 0;
  width: 100%;
  text-align: center;
  font-size: 80%;
  padding-bottom: 0;
  margin: 0;
}

#showfoto-footer {
  display: block;
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  text-align: center;
  font-size: 60%;
  padding-bottom: 0.2em;
  margin: 0;
}

  </style>
</head>
<body>
<header id="title-block-header">
  <h1 class="title editable-text" data-source="meta.title"></h1>
</header>
<div id="log"></div>
<div id="showfoto-block">
  <div id="showfoto-block-img">
    <div id="showfoto-left-cont">
      <button id="showfoto-left">&lt;</button>
    </div><img src="{{ imgurl }}" id="showfoto-img"><div id="showfoto-right-cont">
      <button id="showfoto-right">&gt;</button>
    </div>
  </div>
</div>
<div id="showfoto-title">meow</div>
<p id="showfoto-footer">Photo ID: <span id="showfoto-id"></span> | <a href="mailto:photos@jmq.cz">Send me an e-mail</a> to request a photo in full quality.</p>

<script>
  var log_div = document.getElementById("log")
  var img_container = document.getElementById("img-container")

  var editables = document.getElementsByClassName("editable-text")

  var index = {}
  var response_handler = null
  var socket = null

  function TN(m) {
    return document.createTextNode(m)
  }

  function EL(t) {
    return document.createElement(t)
  }

  function CL(e) {
    while (e.firstChild)
      e.removeChild(e.firstChild)
  }

  function logMsg(m) {
    console.log(m)
    var d = EL("div")
    d.appendChild(TN(m))
    log_div.appendChild(d)
  }

  function editableUpdate(e) {
    CL(e)
    e.appendChild(TN(e.dataset.text))
  }

  function editableSave(ev) {
    let inp = ev.target
    let e = inp.parentNode
    e.dataset.text = inp.value
    editableUpdate(e)
    sendIndexUpdate(e.dataset.source, e.dataset.text)
  }

  function editableKey(ev) {
 //   logMsg(ev.key)
    if (ev.key == "Enter")
      return editableSave(ev)

    if (ev.key == "Escape")
      return editableUpdate(ev.target.parentNode)
  }

  function editableEdit(ev) {
    let e = ev.target
    CL(e)
    inp = EL("input")
    inp.type = "text"
    inp.value = e.dataset.text
    inp.addEventListener("keydown", editableKey)
    e.appendChild(inp)
  }

  for (let e of editables) {
    e.addEventListener("click", editableEdit)
  }

  function sSend(data, rhandler) {
    socket.send(JSON.stringify(data))
    response_handler = rhandler
  }

  function receiveIndex(data) {
    index = JSON.parse(data)

    while (img_container.firstChild) {
      img_container.removeChild(img_container.firstChild)
    }

    for (let i = 0; i < index.images.length; i++) {
      var it = EL("img")
      it.id = "img-" + i
      it.src = "img/thumbnail-" + i
      it.className = "img-tiles"
      for (item in index.images[i])
	it.dataset[item] = index.images[i][item]
      img_container.appendChild(it)
    }

    for (elem of editables) {
      var loc = index
      for (spart of elem.dataset.source.split("."))
	loc = loc[spart]

      elem.dataset.text = loc
      editableUpdate(elem)
    }
  }

  function loadIndex() {
    sSend({
      "_": "index",
    }, receiveIndex)
  }

  function sendIndexUpdate(path, value) {
    sSend({
      "_": "update",
      "path": path,
      "value": value,
    }, receiveIndex)
  }

  try {
    socket = new WebSocket("ws://{{ app.host }}/controller/")
    socket.onopen = function () {
      logMsg("Connection succesful")
      loadIndex()
    }
    socket.onerror = function () {
      logMsg("Connection failed. Reload to retry.")
    }
    socket.onmessage = function (m) {
      if (response_handler === null)
	logMsg("<" + m.data)
      else
      {
	response_handler(m.data)
	response_handler = null
      }
    }
  } catch (err) {
    logMsg("Connection failed: " + err + " Reload to retry.")
  }

  function dispatchKey(e) {
    console.log(e)
    
    if (e.key === "Escape") {
      backlink.activate() // TODO
    }

    if (e.key === "ArrowLeft") {
      if (!!overlay_prev.dataset.target)
      {
	console.log("target is", overlay_prev.dataset.target)
	showfoto_img(document.getElementById(overlay_prev.dataset.target))
      }
    }

    if (e.key === "ArrowRight") {
      if (!!overlay_next.dataset.target)
      {
	console.log("target is", overlay_next.dataset.target)
	showfoto_img(document.getElementById(overlay_next.dataset.target))
      }
    }
  }

  document.addEventListener("keyup", dispatchKey)

  var tsX = null;
  var tsY = null;

  function getTouches(e) {
    return e.touches ||             // browser API
	   e.originalEvent.touches; // jQuery
  }

  function touchStart(e) {
    const first = getTouches(e)[0]
    tsX = first.clientX
    tsY = first.clientY
  }

  function touchMove(e) {
    if (!tsX || !tsY) return

    const move = getTouches(e)[0]
    var difX = move.clientX - tsX
    var difY = move.clientY - tsY

    var absX = Math.abs(difX)
    var absY = Math.abs(difY)

    if (absX > absY*2)
    { // Certainly left-right
      if (difX < 0)
	showfoto_img(document.getElementById(overlay_next.dataset.target))
      else
	showfoto_img(document.getElementById(overlay_prev.dataset.target))
    }

    else if (absY > absX*2)
    {
      // Certainly up-down
      if (difY < 0)
	showfoto_img(document.getElementById(overlay_next.dataset.target))
      else
	showfoto_img(document.getElementById(overlay_prev.dataset.target))
    }
    
    tsX = null
    tsY = null
  }

  document.addEventListener("touchstart", touchStart, false)
  document.addEventListener("touchmove", touchMove, false)

</script>
</body>
</html>
